<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.14.2"/>
    <errors>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;unistd.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;unistd.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="15"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;limits.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;limits.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="16"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;stdio.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;stdio.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="17"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;stdint.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;stdint.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="18"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;stdlib.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;stdlib.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="19"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;stdarg.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;stdarg.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="20"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;stdbool.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;stdbool.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="21"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;fcntl.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;fcntl.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../libs/libft/include/libft.h" line="22"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;sys/wait.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;sys/wait.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="5"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;sys/stat.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;sys/stat.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="6"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;sys/types.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;sys/types.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="7"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;readline/history.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;readline/history.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="8"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;readline/readline.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;readline/readline.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="9"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;errno.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;errno.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="10"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;signal.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;signal.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="11"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;termios.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;termios.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="12"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Include file: &amp;lt;dirent.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results." verbose="Include file: &amp;lt;dirent.h&amp;gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.">
            <location file="../include/minishell.h" line="13"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="errors.c">
            <location file="errors.c" line="60"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;str&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;str&amp;#039; can be declared as pointer to const" cwe="398" file0="errors.c">
            <location file="errors.c" line="15"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="minishell_aux.c">
            <location file="minishell_aux.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="ast/ast_print_types.c">
            <location file="ast/ast_print_types.c" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="ast/ast_print_types.c">
            <location file="ast/ast_print_types.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="ast/ast_print_types.c">
            <location file="ast/ast_print_types.c" line="84"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="ast/ast_print_types.c">
            <location file="ast/ast_print_types.c" line="28"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="ast/ast_print_types.c">
            <location file="ast/ast_print_types.c" line="51"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="ast/ast_print_types.c">
            <location file="ast/ast_print_types.c" line="76"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="ast/ast_print_types.c">
            <location file="ast/ast_print_types.c" line="96"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!init_env&amp;#039; is redundant or there is possible null pointer dereference: init_env." verbose="Either the condition &amp;#039;!init_env&amp;#039; is redundant or there is possible null pointer dereference: init_env." cwe="476" file0="aux/env_aux.c">
            <location file="aux/env_aux.c" line="43" info="Null pointer dereference"/>
            <location file="aux/env_aux.c" line="38" info="Assuming that condition &amp;#039;!init_env&amp;#039; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!init_env&amp;#039; is redundant or there is possible null pointer dereference: init_env." verbose="Either the condition &amp;#039;!init_env&amp;#039; is redundant or there is possible null pointer dereference: init_env." cwe="476" file0="aux/env_aux.c">
            <location file="aux/env_aux.c" line="44" info="Null pointer dereference"/>
            <location file="aux/env_aux.c" line="38" info="Assuming that condition &amp;#039;!init_env&amp;#039; is not redundant"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="aux/env_aux2.c">
            <location file="aux/env_aux2.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;total_len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;total_len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="aux/env_aux2.c">
            <location file="aux/env_aux2.c" line="106"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" cwe="398" file0="aux/env_aux2.c">
            <location file="aux/env_aux2.c" line="103"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;s&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;s&amp;#039; can be declared as pointer to const" cwe="398" file0="aux/env_aux2.c">
            <location file="aux/env_aux2.c" line="103"/>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &amp;#039;value&amp;#039; can be declared as pointer to const" verbose="Variable &amp;#039;value&amp;#039; can be declared as pointer to const" cwe="398" file0="aux/env_aux2.c">
            <location file="aux/env_aux2.c" line="107"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." cwe="563" file0="aux/env_aux2.c">
            <location file="aux/env_aux2.c" line="149"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="aux/env_aux3.c">
            <location file="aux/env_aux3.c" line="22"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;env_var&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;env_var&amp;#039; can be declared as pointer to const" cwe="398" file0="aux/env_aux3.c">
            <location file="aux/env_aux3.c" line="15"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;delimiter&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;delimiter&amp;#039; can be declared as pointer to const" cwe="398" file0="aux/env_aux3.c">
            <location file="aux/env_aux3.c" line="20"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" cwe="398" file0="aux/env_aux4.c">
            <location file="aux/env_aux4.c" line="15"/>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="aux/free.c">
            <location file="aux/free.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="aux/free.c">
            <location file="aux/free.c" line="30"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="aux/free.c">
            <location file="aux/free.c" line="17"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="aux/free.c">
            <location file="aux/free.c" line="35"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;temp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;temp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="aux/free.c">
            <location file="aux/free.c" line="59"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="aux/ft_ms_aux.c" line="13"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;cmd&amp;#039; is redundant or there is possible null pointer dereference: cmd." verbose="Either the condition &amp;#039;cmd&amp;#039; is redundant or there is possible null pointer dereference: cmd." cwe="476" file0="aux/pipe_exec.c">
            <location file="aux/pipe_exec.c" line="192" info="Null pointer dereference"/>
            <location file="aux/pipe_exec.c" line="190" info="Assuming that condition &amp;#039;cmd&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;path&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;path&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="aux/pipe_exec.c">
            <location file="aux/pipe_exec.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="aux/pipe_exec.c">
            <location file="aux/pipe_exec.c" line="167"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtins/builtins.c">
            <location file="builtins/builtins.c" line="18"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;len&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;len&amp;#039; is assigned a value that is never used." cwe="563" file0="builtins/builtins.c">
            <location file="builtins/builtins.c" line="20"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;s&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;s&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/echo_cmd.c">
            <location file="builtins/echo_cmd.c" line="15"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;str&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;str&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/exit_cmd.c">
            <location file="builtins/exit_cmd.c" line="24"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="builtins/export_aux.c">
            <location file="builtins/export_aux.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_node&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_node&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtins/export_aux.c">
            <location file="builtins/export_aux.c" line="108"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;str&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;str&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_aux.c">
            <location file="builtins/export_aux.c" line="45"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;equal_sign&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;equal_sign&amp;#039; is assigned a value that is never used." cwe="563" file0="builtins/export_aux.c">
            <location file="builtins/export_aux.c" line="55"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;arg[i]==&amp;#039;\0&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;arg[i]==&amp;#039;\0&amp;#039;&amp;#039; is always false" cwe="570" file0="builtins/export_aux2.c">
            <location file="builtins/export_aux2.c" line="24"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;arg&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;arg&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_aux2.c">
            <location file="builtins/export_aux2.c" line="15"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_aux2.c">
            <location file="builtins/export_aux2.c" line="31"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;delimiter&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;delimiter&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_aux2.c">
            <location file="builtins/export_aux2.c" line="47"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="44"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="127"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!new_node&amp;#039; is redundant or there is possible null pointer dereference: new_node." verbose="Either the condition &amp;#039;!new_node&amp;#039; is redundant or there is possible null pointer dereference: new_node." cwe="476" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="56" info="Null pointer dereference"/>
            <location file="builtins/export_cmd.c" line="54" info="Assuming that condition &amp;#039;!new_node&amp;#039; is not redundant"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="17"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="17"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="48"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="48"/>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &amp;#039;append&amp;#039; can be declared as pointer to const" verbose="Variable &amp;#039;append&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="104"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." cwe="563" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="44"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." cwe="563" file0="builtins/export_cmd.c">
            <location file="builtins/export_cmd.c" line="64"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;a&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;a&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_print.c">
            <location file="builtins/export_print.c" line="50"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;b&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;b&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_print.c">
            <location file="builtins/export_print.c" line="50"/>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &amp;#039;lptr&amp;#039; can be declared as pointer to const" verbose="Variable &amp;#039;lptr&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_print.c">
            <location file="builtins/export_print.c" line="65"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!new_node&amp;#039; is always false" verbose="Condition &amp;#039;!new_node&amp;#039; is always false" cwe="570" file0="builtins/export_update.c">
            <location file="builtins/export_update.c" line="24"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;key&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_update.c">
            <location file="builtins/export_update.c" line="15"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;value&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/export_update.c">
            <location file="builtins/export_update.c" line="15"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;env&amp;#039; is assigned a value that is never used." cwe="563" file0="builtins/export_update.c">
            <location file="builtins/export_update.c" line="37"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="builtins/unset_cmd.c">
            <location file="builtins/unset_cmd.c" line="28"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;args&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;args&amp;#039; can be declared as pointer to const" cwe="398" file0="builtins/unset_cmd.c">
            <location file="builtins/unset_cmd.c" line="39"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="executor/ast.c" line="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="executor/executor.c" line="13"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;cmd[1]!=&amp;#039;\0&amp;#039;&amp;#039; is always true" verbose="Condition &amp;#039;cmd[1]!=&amp;#039;\0&amp;#039;&amp;#039; is always true" cwe="571" file0="executor/executor.c">
            <location file="executor/executor.c" line="44"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="executor/frees.c" line="13"/>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="executor/frees.c">
            <location file="executor/frees.c" line="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="executor/frees.c">
            <location file="executor/frees.c" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="executor/frees.c">
            <location file="executor/frees.c" line="61"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="executor/frees.c">
            <location file="executor/frees.c" line="80"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." cwe="563" file0="executor/frees.c">
            <location file="executor/frees.c" line="63"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." cwe="563" file0="executor/frees.c">
            <location file="executor/frees.c" line="82"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/aux.c" line="13"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;es&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;es&amp;#039; can be declared as pointer to const" cwe="398" file0="parser/aux.c">
            <location file="parser/aux.c" line="23"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;es&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;es&amp;#039; can be declared as pointer to const" cwe="398" file0="parser/aux.c">
            <location file="parser/aux.c" line="35"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/expand_tilde.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/expand_tilde.c">
            <location file="parser/expand_tilde.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/expand_tilde.c">
            <location file="parser/expand_tilde.c" line="72"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/expand_tilde.c">
            <location file="parser/expand_tilde.c" line="95"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/expand_vars.c" line="13"/>
        </error>
        <error id="autovarInvalidDeallocation" severity="error" msg="Deallocation of a pointer pointing to a string literal (&amp;quot;minishell&amp;quot;) results in undefined behaviour." verbose="The deallocation of a pointer pointing to a string literal (&amp;quot;minishell&amp;quot;) results in undefined behaviour. You should only free memory that has been allocated dynamically." cwe="590" file0="parser/expand_vars.c">
            <location file="parser/expand_vars.c" line="118" info="Deallocating memory that was not dynamically allocated"/>
            <location file="parser/expand_vars.c" line="116" info="Assignment &amp;#039;val=&amp;quot;minishell&amp;quot;&amp;#039;, assigned value is &amp;quot;minishell&amp;quot;"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/expand_vars.c">
            <location file="parser/expand_vars.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;val&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;val&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/expand_vars.c">
            <location file="parser/expand_vars.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/expand_vars.c">
            <location file="parser/expand_vars.c" line="67"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/expand_vars.c">
            <location file="parser/expand_vars.c" line="83"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/expand_vars2.c" line="13"/>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="parser/expand_vars2.c">
            <location file="parser/expand_vars2.c" line="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/get_newstr.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/get_newstr.c">
            <location file="parser/get_newstr.c" line="80"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/init_cmd.c" line="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/init_heredoc.c" line="13"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="parser/init_heredoc.c">
            <location file="parser/init_heredoc.c" line="85"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xp_line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xp_line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/init_heredoc.c">
            <location file="parser/init_heredoc.c" line="72"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/init_heredoc_aux.c" line="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/parse.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;quote&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;quote&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/parse.c">
            <location file="parser/parse.c" line="54"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/parse_exec.c" line="13"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="parser/parse_exec.c">
            <location file="parser/parse_exec.c" line="96"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_arg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_arg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/parse_exec.c">
            <location file="parser/parse_exec.c" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tok&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tok&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/parse_exec.c">
            <location file="parser/parse_exec.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tok&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tok&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/parse_exec.c">
            <location file="parser/parse_exec.c" line="80"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cmd&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cmd&amp;#039; is assigned a value that is never used." cwe="563" file0="parser/parse_exec.c">
            <location file="parser/parse_exec.c" line="37"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/parse_prechecks.c" line="13"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Return value &amp;#039;reprompt(MISSING_QUOTE,1,s),NULL&amp;#039; is always false" verbose="Return value &amp;#039;reprompt(MISSING_QUOTE,1,s),NULL&amp;#039; is always false" cwe="570" file0="parser/parse_prechecks.c">
            <location file="parser/parse_prechecks.c" line="19"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Return value &amp;#039;reprompt(LOGICAL_TOKEN,1,s),NULL&amp;#039; is always false" verbose="Return value &amp;#039;reprompt(LOGICAL_TOKEN,1,s),NULL&amp;#039; is always false" cwe="570" file0="parser/parse_prechecks.c">
            <location file="parser/parse_prechecks.c" line="21"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Return value &amp;#039;reprompt(PIPE_SYNTAX,2,s),NULL&amp;#039; is always false" verbose="Return value &amp;#039;reprompt(PIPE_SYNTAX,2,s),NULL&amp;#039; is always false" cwe="570" file0="parser/parse_prechecks.c">
            <location file="parser/parse_prechecks.c" line="23"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Return value &amp;#039;reprompt(SEMICOLON,1,s),NULL&amp;#039; is always false" verbose="Return value &amp;#039;reprompt(SEMICOLON,1,s),NULL&amp;#039; is always false" cwe="570" file0="parser/parse_prechecks.c">
            <location file="parser/parse_prechecks.c" line="25"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Return value &amp;#039;reprompt(SINGLE_AMPERSAND,1,s),NULL&amp;#039; is always false" verbose="Return value &amp;#039;reprompt(SINGLE_AMPERSAND,1,s),NULL&amp;#039; is always false" cwe="570" file0="parser/parse_prechecks.c">
            <location file="parser/parse_prechecks.c" line="27"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Return value &amp;#039;reprompt(PARENTHESIS,1,s),NULL&amp;#039; is always false" verbose="Return value &amp;#039;reprompt(PARENTHESIS,1,s),NULL&amp;#039; is always false" cwe="570" file0="parser/parse_prechecks.c">
            <location file="parser/parse_prechecks.c" line="29"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Return value &amp;#039;reprompt(INVALID_TOKEN,2,s),NULL&amp;#039; is always false" verbose="Return value &amp;#039;reprompt(INVALID_TOKEN,2,s),NULL&amp;#039; is always false" cwe="570" file0="parser/parse_prechecks.c">
            <location file="parser/parse_prechecks.c" line="31"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/parse_quotes.c" line="13"/>
        </error>
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="parser/parse_quotes.c">
            <location file="parser/parse_quotes.c" line="0"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/parse_redir.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tok&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tok&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="parser/parse_redir.c">
            <location file="parser/parse_redir.c" line="21"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/str_utils.c" line="13"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;end&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;end&amp;#039; can be declared as pointer to const" cwe="398" file0="parser/str_utils.c">
            <location file="parser/str_utils.c" line="19"/>
        </error>
        <error id="constParameterPointer" severity="style" msg="Parameter &amp;#039;es&amp;#039; can be declared as pointer to const" verbose="Parameter &amp;#039;es&amp;#039; can be declared as pointer to const" cwe="398" file0="parser/str_utils.c">
            <location file="parser/str_utils.c" line="69"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/str_utils2.c" line="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/syntax_tests.c" line="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/syntax_tests2.c" line="13"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="parser/syntax_tests2.c">
            <location file="parser/syntax_tests2.c" line="61"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="parser/syntax_tests2.c">
            <location file="parser/syntax_tests2.c" line="62"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;end&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;end&amp;#039; is assigned a value that is never used." cwe="563" file0="parser/syntax_tests2.c">
            <location file="parser/syntax_tests2.c" line="56"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="parser/tokens.c" line="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="signals/signals.c" line="13"/>
        </error>
        <error id="missingInclude" severity="information" msg="Include file: &amp;quot;../include/minishell.h&amp;quot; not found." verbose="Include file: &amp;quot;../include/minishell.h&amp;quot; not found.">
            <location file="signals/signals_type.c" line="13"/>
        </error>
    </errors>
</results>
